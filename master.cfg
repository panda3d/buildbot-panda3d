# -*- python -*-
# ex: set syntax=python:

__all__ = ["BuildmasterConfig"]

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import *
from buildbot.www.oauth2 import GitHubAuth
from buildbot.plugins import util

import config
from status import irc_status, webhook_status
#from builders.debian import debian_builder, linux_rtdist_builder
from builders.docker import docker_builder
from builders.windows import windows_builder
from builders.macosx import macosx_builder
from builders.manylinux import manylinux_builder

# Fetch list of branches from GitHub.
import urllib, json
api = urllib.request.urlopen('https://api.github.com/repos/panda3d/panda3d/branches')
branches = []
for branch in json.loads(api.read()):
    branches.append(branch['name'])


BuildmasterConfig = {
    "title": "Panda3D",
    "titleURL": config.title_url,
    "buildbotURL": config.buildbot_url,
    "buildbotNetUsageData": None,
    "services": [irc_status, webhook_status],
    "www": {
        "port": 8010,
        "change_hook_dialects": {"github": True},
        "auth": GitHubAuth(config.github_oauth_client_id, config.github_oauth_client_secret),
    },

    "builders": [
        #debian_builder("sdk", "debian", "wheezy", arch="i386"),
        #debian_builder("sdk", "debian", "wheezy", arch="amd64"),
        windows_builder(arch="i386"),
        windows_builder(arch="amd64"),
        macosx_builder("10.6"),
        macosx_builder("10.9"),
        macosx_builder("11.0"),

        docker_builder("sdk", "ubuntu", "trusty", arch="i386"),
        docker_builder("sdk", "ubuntu", "trusty", arch="amd64"),
        docker_builder("sdk", "ubuntu", "xenial", arch="i386"),
        docker_builder("sdk", "ubuntu", "xenial", arch="amd64"),
        docker_builder("sdk", "ubuntu", "bionic", arch="i386"),
        docker_builder("sdk", "ubuntu", "bionic", arch="amd64"),
        docker_builder("sdk", "ubuntu", "focal", arch="amd64"),
        docker_builder("sdk", "ubuntu", "groovy", arch="amd64"),

        manylinux_builder("manylinux1", arch="i686"),
        manylinux_builder("manylinux1", arch="x86_64"),
        manylinux_builder("manylinux2010", arch="i686"),
        manylinux_builder("manylinux2010", arch="x86_64"),
        manylinux_builder("manylinux2014", arch="x86_64"),

        #debian_builder("runtime", "debian", "wheezy", arch="i386"),
        #debian_builder("runtime", "debian", "wheezy", arch="amd64"),

        #docker_builder("runtime", "ubuntu", "trusty", arch="i386"),
        #docker_builder("runtime", "ubuntu", "trusty", arch="amd64"),
        #docker_builder("runtime", "ubuntu", "xenial", arch="i386"),
        #docker_builder("runtime", "ubuntu", "xenial", arch="amd64"),

        #linux_rtdist_builder(arch="i386"),
        #linux_rtdist_builder(arch="amd64"),
    ],

    "schedulers": [
        SingleBranchScheduler("devel", branch="master",
                              properties={'optimize': False},
                              builderNames=[
            "sdk-bionic-amd64", "sdk-bionic-i386",
            "sdk-focal-amd64",
            "sdk-groovy-amd64",
            "sdk-windows-amd64", "sdk-windows-i386",
            "manylinux1-x86_64", "manylinux1-i686",
            "macosx-10.9",
        ], treeStableTimer=3, fileIsImportant=config.is_important),

        ForceScheduler("force",
            builderNames=[
                "manylinux1-x86_64", "manylinux1-i686",
                "manylinux2010-x86_64", "manylinux2010-i686",
                "manylinux2014-x86_64",
                "sdk-trusty-amd64", "sdk-trusty-i386",
                "sdk-xenial-amd64", "sdk-xenial-i386",
                "sdk-bionic-amd64", "sdk-bionic-i386",
                "sdk-focal-amd64",
                "sdk-groovy-amd64",
                #"sdk-wheezy-amd64", "sdk-wheezy-i386",
                "sdk-windows-amd64", "sdk-windows-i386",
                "macosx-11.0", "macosx-10.9", "macosx-10.6",
            ],
            codebases=[
                util.CodebaseParameter(
                    "",
                    branch=ChoiceStringParameter(name="branch", label="Branch:", choices=branches, default="master"),
                    revision=StringParameter(name="revision", label="Revision:"),
                    repository=FixedParameter(name="repository"),
                    project=FixedParameter(name="project"),
                ),
            ],

            properties=[
                BooleanParameter(name="clean", label="Clean Build", default=False),
                BooleanParameter(name="optimize", label="Optimized Build", default=False),
            ]
        ),
    ],

    "workers": config.workers,
    "protocols": {"pb": {"port": 9989}},
    "db": {"db_url": "sqlite:///state.sqlite"},
}
