FROM scratch
ADD ubuntu-bionic-core-cloudimg-amd64-root.tar.gz /

# a few minor docker-specific tweaks
# see https://github.com/docker/docker/blob/master/contrib/mkimage/debootstrap
RUN echo '#!/bin/sh' > /usr/sbin/policy-rc.d \
	&& echo 'exit 101' >> /usr/sbin/policy-rc.d \
	&& chmod +x /usr/sbin/policy-rc.d \
	\
	&& dpkg-divert --local --rename --add /sbin/initctl \
	&& cp -a /usr/sbin/policy-rc.d /sbin/initctl \
	&& sed -i 's/^exit.*/exit 0/' /sbin/initctl \
	\
	&& echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup \
	\
	&& echo 'DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' > /etc/apt/apt.conf.d/docker-clean \
	&& echo 'APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' >> /etc/apt/apt.conf.d/docker-clean \
	&& echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";' >> /etc/apt/apt.conf.d/docker-clean \
	\
	&& echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/docker-no-languages \
	\
	&& echo 'Acquire::GzipIndexes "true"; Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/docker-gzip-indexes

ENV DEBIAN_FRONTEND=noninteractive \
    TZ=UTC

RUN echo "deb http://archive.ubuntu.com/ubuntu bionic main universe multiverse" > /etc/apt/sources.list
RUN echo "deb http://archive.ubuntu.com/ubuntu bionic-security main universe multiverse" >> /etc/apt/sources.list
RUN echo "deb http://archive.ubuntu.com/ubuntu bionic-updates main universe multiverse" >> /etc/apt/sources.list

RUN apt-get update && \
    apt-get -y --force-yes --no-install-recommends install dirmngr gnupg && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BCD3D563A258828C

RUN echo "deb http://ppa.launchpad.net/panda3d/ppa/ubuntu bionic main" >> /etc/apt/sources.list

RUN apt-get update && apt-get -y --force-yes --no-install-recommends install \
    pkg-config bison flex build-essential fakeroot python-dev \
    libpng-dev zlib1g-dev libssl-dev libjpeg-dev libtiff-dev \
    libx11-dev libxrandr-dev libxxf86dga-dev libxcursor-dev \
    libgl1-mesa-dev nvidia-cg-toolkit libode-dev libopenal-dev \
    libvorbis-dev libavcodec-dev libavutil-dev libavformat-dev \
    libswscale-dev libfreetype6-dev libgtk2.0-dev libeigen3-dev \
    libsquish-dev libfcollada-dev libvrpn-dev libquat-dev \
    libassimp-dev libbullet-dev libopenexr-dev libopusfile-dev \
    cmake unzip git ca-certificates python-pip python-setuptools \
    python3-dev python3-pip python3-setuptools libegl1-mesa-dev

RUN pip install pytest && pip3 install pytest

# Build thirdparty libraries
ENV MAKEPANDA_THIRDPARTY /root/thirdparty
ADD https://codeload.github.com/rdb/panda3d-thirdparty/zip/master /root/thirdparty.zip
RUN cd /root && unzip thirdparty.zip && mv panda3d-thirdparty-master thirdparty
RUN export SOURCE_DATE_EPOCH=$(stat -c %Y /root/thirdparty/CMakeLists.txt); \
    mkdir /root/thirdparty/build; \
    cd /root/thirdparty/build; \
    cmake -DDISABLE_ALL=ON -DBUILD_ARTOOLKIT=ON .. && make VERBOSE=1
